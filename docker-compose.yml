services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:3000"
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgres://user:password@db:5432/echoapp}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - SERVER_BIND=0.0.0.0:3000
      - RUST_LOG=info
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-here}
      - SESSION_MAXAGE=7200
      - APP_ENV=${APP_ENV:-development}
      - APP_NAME=echoapp
      - CORS_ORIGIN=${CORS_ORIGIN:-http://localhost:8000}
      - BOT_TOKEN=${BOT_TOKEN}
      - SENTRY_DSN=${SENTRY_DSN}
      - TEST_PUBLIC_KEY=${TEST_PUBLIC_KEY}

    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - app-network
    profiles: [development, production]

  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=echoapp
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migration:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d echoapp"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    profiles: [development]
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    profiles: [development]
    networks:
      - app-network

volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge
